generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model application {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  cover_letter  String?  @db.VarChar
  status        String   @db.VarChar(20)
  job_id        String   @db.Uuid
  freelancer_id String   @db.Uuid
  created_at    DateTime @default(now()) @db.Timestamp(6)
  updated_at    DateTime @default(now()) @db.Timestamp(6)
  user          user     @relation(fields: [freelancer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  job           job      @relation(fields: [job_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model company {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?  @db.VarChar
  address     String?  @db.VarChar(255)
  city        String?  @db.VarChar(100)
  state       String?  @db.VarChar(100)
  country     String?  @db.VarChar(100)
  zip_code    String?  @db.VarChar(20)
  name        String   @db.VarChar(255)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  user_id     String   @db.Uuid
  tenant_id   String   @db.VarChar(255)
  user        user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  job         job[]
}

model freelancer_profile {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  freelancer_id String   @db.Uuid
  created_at    DateTime @default(now()) @db.Timestamp(6)
  updated_at    DateTime @default(now()) @db.Timestamp(6)
  user          user     @relation(fields: [freelancer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model job {
  id           String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title        String        @db.VarChar(255)
  description  String        @db.VarChar
  requirements String?       @db.VarChar
  salary       Int?
  location     String?       @db.VarChar(255)
  company_id   String        @db.Uuid
  created_at   DateTime      @default(now()) @db.Timestamp(6)
  updated_at   DateTime      @default(now()) @db.Timestamp(6)
  application  application[]
  company      company       @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id                 String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email              String               @unique @db.VarChar(255)
  firstName          String?              @db.VarChar(255)
  lastName           String?              @db.VarChar(255)
  roq_user_id        String               @db.VarChar(255)
  tenant_id          String               @db.VarChar(255)
  created_at         DateTime             @default(now()) @db.Timestamp(6)
  updated_at         DateTime             @default(now()) @db.Timestamp(6)
  application        application[]
  company            company[]
  freelancer_profile freelancer_profile[]
}
